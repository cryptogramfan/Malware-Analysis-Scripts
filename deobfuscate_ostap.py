#!/usr/bin/env python
#
# A script that deobfuscates Ostap JSE (JScript Encoded) downloaders. The script is based 
# on Ostap samples analysed in August 2019, such as those delivering TrickBot. It will try
# to deobfuscate the sample using subtraction and addition.
# 
# To use the script, supply a file as an argument or pipe it to stdin:
#
# $ python deobfuscate_ostap.py ostap.jse
# $ cat ostap.jse | deobfuscate_ostap.py
#
# Author...: Alex Holland (@cryptogramfan)
# Date.....: 2019-08-29 
# Version..: 0.0.2
# License..: CC BY 4.0

import os
import sys
import re

values_0 = []
values_1 = []

# Subtract index 0 values from index 1 values
def subtract_values():
	characters_sub = []
	servers = []
	urls = []
	
	try:
		print("[+] Trying deobfuscation using subtraction...")
		charcodes_sub = [i - j for i, j in zip(values_1, values_0)]
		
	except:
		print("[!] Error subtracting index 0 elements from index 1 elements.")
		add_values() # Try addition instead
	
	try:
		for charcode_sub in charcodes_sub:
			character_sub = chr(charcode_sub)
			characters_sub.append(character_sub)
		
		characters_sub = ''.join(characters_sub)
	
	except:
		print("[!] Error converting character codes to characters.")
		add_values()
	
	match = re.search("Script", characters_sub)
		
	if match:
		print("[+] Deobfuscation using subtraction was successful:\n")
		print(characters_sub)
		
		servers = re.findall("https:\/\/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.+Drives", characters_sub)
		
		for server in servers:
			server = re.sub("Drives$", "", server)
			urls.append(server)
			
		if urls:
			print("\n[+] Found URL(s):\n")
			print(", ".join(urls))
		
		exit(0)
		
	else:
		print("[!] Deobfuscation using subtraction was unsuccessful.")
		add_values()
	
	return;

# Add index 0 values to index 1 values
def add_values():
	characters_add = []
	servers = []
	urls = []

	try:
		print("[+] Trying deobfuscation using addition...")
		charcodes_add = [i + j for i, j in zip(values_1, values_0)]
	
	except:
		print("[!] Error adding index 0 elements to index 1 elements. Exiting.")
		exit(0)
	
	try:
		for charcode_add in charcodes_add:
			character_add = chr(charcode_add)
			characters_add.append(character_add)
		
		characters_add = ''.join(characters_add)
	
	except:
		print("[!] Error converting character codes to characters. Exiting.")
		exit(0)
		
	match = re.search("Script", characters_add)
		
	if match:
		print("[+] Deobfuscation using addition was successful:\n")
		print(characters_add)
		
		servers = re.findall("https:\/\/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}.+Drives", characters_add)
		
		for server in servers:
			server = re.sub("Drives$", "", server)
			urls.append(server)
			
		if urls:
			print("\n[+] Found URL(s):\n")
			print(", ".join(urls))
			
		exit(0)
		
	else:
		print("[!] Deobfuscation using addition was unsuccessful. Exiting.")
		exit(0)
	
	return;
	
if len(sys.argv) > 1:
	file = open(sys.argv[1], 'r')
else:
	file = sys.stdin

while 1:
	input = file.read()
	
	# Find the values of index 0 elements
	try:
		print("\n[+] Analysing %s" % os.path.basename(file.name))
		print("[+] Searching for index 0 elements...")
		array_0 = re.findall("\[0\]=\d+;", input)
	
		for element in array_0:
			element = re.sub("\[0\]=", "", element) 
			element = re.sub(";", "", element)
			values_0.append(element)
	
	except:
		print("[!] Error finding index 0 elements. Exiting.")
		exit(0)
	
	if not values_0:
		print("[!] No index 0 elements found. Exiting.")
		exit(0)
	
	# Convert index 0 elements to integer values
	try:
		values_0 = map(int, values_0)
	
	except: 
		print("[!] Error converting index 0 elements to integers. Exiting.")
		exit(0)
	
	# Find the values of index 1 elements
	try:
		print("[+] Searching for index 1 elements...")
		array_1 = re.findall("\[1\]=\d+;", input)
	
		for element in array_1:
			element = re.sub("\[1\]=", "", element) 
			element = re.sub(";", "", element) 
			values_1.append(element)
	
	except:
		print("[!] Error finding index 1 elements. Exiting.")
		exit(0)
	
	if not values_1:
		print("[!] No index 1 elements found. Exiting.")
		exit(0)
	
	# Convert index 1 elements to integer values
	try:
		values_1 = map(int, values_1)
	
	except: 
		print("[!] Error converting index 1 elements to integers. Exiting.")
		exit(0)
	
	subtract_values()
	add_values()
	
	exit(0)
