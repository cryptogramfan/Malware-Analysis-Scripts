#!/usr/bin/env python
#
# A script that extracts embedded images from Open Office XML (OOXML) documents and generates a link
# chart that clusters similar images together. The script computes average hashes of the extracted
# images, calculates the Hamming distance between each average hash, then graphs the images if they
# are similar, i.e. the distance between the image hashes satisify a distance threshold. The script
# can be used as a technique for visually identifying malware campaigns involving documents. To use
# the script, supply a directory containing OOXML files. By default, the script outputs DOT files
# that can be exported as images using Graphviz. If Graphviz is in your PATH you can also export to
# an SVG (preferred) or PNG image.
#
# $ graph_similar_document_images.py -d <directory> -o [svg|png]
# 
# Author.....: Alex Holland (@cryptogramfan)
# Date.......: 2020-01-31
# Version....: 0.0.1
# License....: CC BY 4.0

import os
import distance
import hashlib
import argparse
import imagehash
import subprocess
import magic
from PIL import Image
from zipfile import ZipFile
from shutil import copyfileobj
from time import strftime
from networkx.algorithms import bipartite
from networkx.drawing.nx_agraph import write_dot
from networkx import graph as nx

parser = argparse.ArgumentParser(description='\nUsage: graph_similar_document_images.py -d <directory> -o [svg|png]')
parser.add_argument('-d', '--directory', dest='input_dir', help='Directory to process', required=True)
parser.add_argument('-o', '--output', choices=['svg', 'png'], help='Output image format', default='svg')
parsed_args = parser.parse_args()
network = nx.Graph()
timestr = strftime('%Y%m%d-%H%M%S')
graph_file = 'graph_similar_document_images_' + timestr
input_dir = parsed_args.input_dir
image_dir = os.path.join(os.getcwd(), 'extracted_document_images_' + timestr)
hamming_threshold = 5

def extract_ooxml(f):
    try:    
        os.makedirs(image_dir)
        print('[+] Created ' + image_dir + '.')
    
    except OSError:
        if not os.path.isdir(image_dir):
            raise

    with open(f, 'rb') as infile:
        bytes = infile.read()
        hash_document = hashlib.sha256(bytes).hexdigest()
        
        if ('Microsoft OOXML' in magic.from_file(f)) or ('Microsoft Word 2007+' in magic.from_file(f)):
            try:
                with ZipFile(f) as z:
                    for i in z.infolist():
                        name = i.filename                   
                        
                        if name.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):                                           
                           try:
                               image_path = os.path.join(image_dir, hash_document)
                               with z.open(name) as in_image, open(image_path, 'wb') as out_image:
                                    copyfileobj(in_image, out_image)
                                    print('[+] Extracted image from ' + f + '.')

                           except Exception as e: 
                               print('[!] Error extracting image from ' + hash_document, e)

            except Exception as e: 
                print('[!] Error unzipping ' + f, e)
        else:
            print('[!] Skipping ' + f + ' because it isn\'t OOXML.')

def calculate_image_distance():
    print('[+] Calculating image hash distance...')
    images = []
    for i in os.listdir(image_dir):
        images.append(i)

    images_a = images
    images_b = images
    
    for a in images_a:
        image_a_path = os.path.join(image_dir, a)
        hash_a = str(imagehash.average_hash(Image.open(image_a_path)))
                      
        for b in images_b:
            image_b_path = os.path.join(image_dir, b)
            hash_b = str(imagehash.average_hash(Image.open(image_b_path)))
            
            hamming_distance = distance.hamming(hash_a, hash_b)

            if hamming_distance <= hamming_threshold:
                print('[+] ' + a + ' is similar to ' + b + ' (' + str(hamming_distance) + ').')
                
                network.add_node(a,
                        label=a,
                        image=image_a_path,
                        type='image',
                        style='filled',
                        fillcolor='white',
                        color='white',
                        fontcolor='black',
                        fontname='Arial',
                        fontsize='20',
                        bipartite=0)

                network.add_node(b,
                        label=b,
                        image=image_b_path,
                        type='image',
                        style='filled',
                        fillcolor='white',
                        color='white',
                        fontcolor='black',
                        fontname='Arial',
                        fontsize='20',
                        bipartite=1)

                network.add_edge(b,
                        a,
                        penwidth=3,
                        color='#0096D6',
                        dir='none')

    write_dot(network, graph_file + '.dot')
    print('[+] Created ' + graph_file + '.dot.')

    return True

def export_graph():
    try:
        if parsed_args.output == 'png':
            subprocess.Popen(['sfdp',
                            graph_file + '.dot', 
                            '-Tpng', 
                            '-o', 
                            graph_file + '.png',
                            '-Gfontname="Arial"'
                            ])
                            
            print('[+] Created ' + graph_file + '.png.')
            
        if parsed_args.output == 'svg':
            subprocess.Popen(['sfdp', 
                            graph_file + '.dot', 
                            '-Tsvg', 
                            '-o', 
                            graph_file + '.svg',
                            '-Gfontname="Arial"'
                            ])
                            
            print('[+] Created ' + graph_file + '.svg.')

    except: 
            print('[!] Error exporting graph image. Check that Graphviz is added to your PATH.')

    return True

def main():
    for f in os.listdir(input_dir):
        if os.path.isfile(os.path.join(input_dir, f)):
            f = os.path.join(input_dir, f)
            extract_ooxml(f)

    if calculate_image_distance():
        export_graph()

if __name__== "__main__":
    main()
