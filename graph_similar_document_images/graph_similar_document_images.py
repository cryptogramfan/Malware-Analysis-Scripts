#!/usr/bin/env python
#
# A script that extracts embedded images from Open Office XML (OOXML) documents and generates a link
# chart that clusters similar images together. The script computes average hashes of the extracted
# images, then graphs the images if they meet the similarity threshold. The script can be used as a
# technique for visually identifying malware campaigns involving documents. To use the script, supply
# a directory containing OOXML files. The script outputs DOT files that can be exported as images using
# Graphviz. If Graphviz is in your PATH you can also export to an SVG (preferred) or PNG image.
#
# $ graph_similar_document_images.py -d <directory_containing_ooxml_files> -t <min_similarity_threshold> -o [svg|png]
# 
# Author.....: Alex Holland (@cryptogramfan)
# Date.......: 2020-01-31
# Version....: 0.0.2
# License....: CC BY 4.0

import os
import hashlib
import argparse
import imagehash
import subprocess
import magic
from PIL import Image
from zipfile import ZipFile
from shutil import copyfileobj
from time import strftime
from networkx.algorithms import bipartite
from networkx.drawing.nx_agraph import write_dot
from networkx import graph as nx

parser = argparse.ArgumentParser(description='\nUsage: graph_similar_document_images.py -d <directory_containing_ooxml_files> -o [svg|png]')
parser.add_argument('-d', '--directory', dest='input_dir', help='Directory to process', required=True)
parser.add_argument('-t', '--threshold', dest='min_similarity_threshold', type=float, help='Minimum percentage similarity between images to graph (0 to 100)', default=87.5)
parser.add_argument('-o', '--output', choices=['svg', 'png'], help='Output image format', default='svg')
parsed_args = parser.parse_args()
network = nx.Graph()
timestr = strftime('%Y%m%d-%H%M%S')
graph_file = 'graph_similar_document_images_' + timestr
input_dir = parsed_args.input_dir
image_dir = os.path.join(os.getcwd(), 'extracted_document_images_' + timestr)
min_similarity_threshold = parsed_args.min_similarity_threshold

def extract_ooxml(f):
    with open(f, 'rb') as infile:
        bytes = infile.read()
        hash_document = hashlib.sha256(bytes).hexdigest()
        
        if ('Microsoft OOXML' in magic.from_file(f)) or ('Microsoft Word 2007+' in magic.from_file(f)):
            try:
                with ZipFile(f) as z:
                    for i in z.infolist():
                        name = i.filename
                        
                        if name.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                           try:
                               image_path = os.path.join(image_dir, hash_document)
                               with z.open(name) as in_image, open(image_path, 'wb') as out_image:
                                    copyfileobj(in_image, out_image)
                                    print('[+] Extracted image from ' + f + '.')

                           except Exception as e: 
                               print('[!] Error extracting image from ' + hash_document, e)

            except Exception as e: 
                print('[!] Error unzipping ' + f, e)
        else:
            print('[!] Skipping ' + f + ' because it isn\'t OOXML.')

def calculate_image_distance():
    print('[+] Computing image hash distances...')
    images = []
    for i in os.listdir(image_dir):
        images.append(i)

    images_a = images
    images_b = images
    
    for a in images_a:
        image_a_path = os.path.join(image_dir, a)
        hash_a = imagehash.average_hash(Image.open(image_a_path))
                      
        for b in images_b:
            image_b_path = os.path.join(image_dir, b)
            hash_b = imagehash.average_hash(Image.open(image_b_path))
            
            image_distance = ((hash_a-hash_b)/len(hash_a.hash)**2)*100 # Each image hash is 64 bits long
            image_similarity = 100-image_distance

            if image_similarity >= min_similarity_threshold:
                print('[+] ' + a + ' is ' + str('%.0f' % image_similarity) + '% similar to ' + b + '.')
                network.add_node(a,
                        label=a,
                        image=image_a_path,
                        type='image',
                        style='filled',
                        fillcolor='white',
                        color='white',
                        fontcolor='black',
                        fontname='Arial',
                        fontsize='20',
                        bipartite=0)

                network.add_node(b,
                        label=b,
                        image=image_b_path,
                        type='image',
                        style='filled',
                        fillcolor='white',
                        color='white',
                        fontcolor='black',
                        fontname='Arial',
                        fontsize='20',
                        bipartite=1)

                network.add_edge(b,
                        a,
                        penwidth=3,
                        color='#0096D6',
                        dir='none')

    write_dot(network, graph_file + '.dot')
    print('[+] Created ' + graph_file + '.dot.')

    return True

def export_graph():
    try:
        if parsed_args.output == 'png':
            subprocess.Popen(['sfdp',
                            graph_file + '.dot', 
                            '-Tpng', 
                            '-o', 
                            graph_file + '.png',
                            '-Gfontname="Arial"'
                            ])
                            
            print('[+] Created ' + graph_file + '.png.')
            
        if parsed_args.output == 'svg':
            subprocess.Popen(['sfdp', 
                            graph_file + '.dot', 
                            '-Tsvg', 
                            '-o', 
                            graph_file + '.svg',
                            '-Gfontname="Arial"'
                            ])
                            
            print('[+] Created ' + graph_file + '.svg.')

    except: 
            print('[!] Error exporting graph image. Check that Graphviz is added to your PATH.')

    return True

def main():
    try:    
        os.makedirs(image_dir)
        print('[+] Created ' + image_dir + '.')
    
    except OSError:
        if not os.path.isdir(image_dir):
            raise

    for f in os.listdir(input_dir):
        if os.path.isfile(os.path.join(input_dir, f)):
            f = os.path.join(input_dir, f)
            extract_ooxml(f)

    if calculate_image_distance():
        export_graph()

if __name__== "__main__":
    main()
